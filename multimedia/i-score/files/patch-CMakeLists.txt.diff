--- /dev/null	2014-02-10 09:44:07.000000000 +0100
+++ CMakeLists.txt	2014-02-09 16:42:13.000000000 +0100
@@ -0,0 +1,83 @@
+# CMake integration by Christian Frisson (UMONS)
+
+# Project settings
+PROJECT(ISCORE)
+cmake_minimum_required(VERSION 2.6.2)
+
+OPTION(USE_DEBUG "Use Debug" ON)
+OPTION(BUILD_SHARED_LIBS "Build libraries as shared" ON)
+
+IF ( USE_DEBUG )
+	MESSAGE( "\nConfigured for Debug Build")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
+	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
+	SET(CMAKE_BUILD_TYPE "Debug")
+	SET(CMAKE_VERBOSE_MAKEFILE ON)
+ELSE ( USE_DEBUG )
+	MESSAGE( "\nConfigured for Release Build")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O3")
+	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
+	SET(CMAKE_BUILD_TYPE "Release")
+	SET(CMAKE_VERBOSE_MAKEFILE OFF)
+	IF(APPLE)
+		SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/release")
+	ENDIF()
+ENDIF ( USE_DEBUG )
+
+# clang under OSX 10.9
+SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11") #-stdlib=libc++
+
+#Qt4
+find_package(Qt4)
+include(${QT_USE_FILE})
+
+#LibXml2
+FIND_PACKAGE ( LibXml2 REQUIRED )
+INCLUDE_DIRECTORIES( ${LIBXML2_INCLUDE_DIR} )
+
+#JamomaCore
+INCLUDE(FindPackageHandleStandardArgs)
+FIND_PATH(JAMOMA_FOUNDATION_INCLUDE_DIR TTBase.h PATH_SUFFIXES jamoma)
+FIND_LIBRARY(JAMOMA_FOUNDATION_LIBRARY NAMES JamomaFoundation)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(JAMOMA_FOUNDATION DEFAULT_MSG JAMOMA_FOUNDATION_LIBRARY JAMOMA_FOUNDATION_INCLUDE_DIR)
+INCLUDE_DIRECTORIES(${JAMOMA_FOUNDATION_INCLUDE_DIR})
+FIND_PATH(JAMOMA_DSP_INCLUDE_DIR TTDSP.h PATH_SUFFIXES jamoma)
+FIND_LIBRARY(JAMOMA_DSP_LIBRARY NAMES JamomaDSP)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(JAMOMA_DSP DEFAULT_MSG JAMOMA_DSP_LIBRARY JAMOMA_DSP_INCLUDE_DIR)
+INCLUDE_DIRECTORIES(${JAMOMA_DSP_INCLUDE_DIR})
+FIND_PATH(JAMOMA_MODULAR_INCLUDE_DIR TTModular.h PATH_SUFFIXES jamoma)
+FIND_LIBRARY(JAMOMA_MODULAR_LIBRARY NAMES JamomaModular)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(JAMOMA_MODULAR DEFAULT_MSG JAMOMA_MODULAR_LIBRARY JAMOMA_MODULAR_INCLUDE_DIR)
+INCLUDE_DIRECTORIES(${JAMOMA_MODULAR_INCLUDE_DIR})
+
+#JamomaScore
+FIND_PATH(JAMOMA_SCORE_INCLUDE_DIR TTScore.h PATH_SUFFIXES jamoma)
+FIND_LIBRARY(JAMOMA_SCORE_LIBRARY NAMES JamomaScore)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(JAMOMA_SCORE DEFAULT_MSG JAMOMA_SCORE_LIBRARY JAMOMA_SCORE_INCLUDE_DIR)
+
+# Score
+INCLUDE_DIRECTORIES("headers")
+FILE(GLOB ISCORE_SRCS sources/*.cpp)
+FILE(GLOB ISCORE_HDRS headers/*.hpp)
+FILE(GLOB ISCORE_UIS forms/*.ui)
+
+# Generates ui_*.h files
+QT4_WRAP_UI(ISCORE_UIS_H ${ISCORE_UIS})
+
+# Generates moc_*.cxx files
+QT4_WRAP_CPP(ISCORE_MOC_SRCS ${ISCORE_HDRS} OPTIONS "-nw") # for all headers that potentially declare Q_OBJECT, otherwise warnings are suppressed
+
+# Don't forget to include output directory, otherwise
+# the UI file won't be wrapped!
+include_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR})
+
+#IF ( APPLE )
+#	SET(OS_SPECIFIC MACOSX_BUNDLE)
+#ELSEIF(WIN32 OR MINGW)
+#	SET(OS_SPECIFIC "WIN32")
+#ENDIF()
+
+ADD_EXECUTABLE(i-score ${OS_SPECIFIC} ${ISCORE_SRCS} ${ISCORE_HDRS} ${ISCORE_UIS_H} ${ISCORE_MOC_SRCS})
+
+TARGET_LINK_LIBRARIES(i-score ${LIBXML2_LIBRARIES} ${JAMOMA_SCORE_LIBRARY} ${JAMOMA_MODULAR_LIBRARY} ${JAMOMA_DSP_LIBRARY} ${JAMOMA_FOUNDATION_LIBRARY} ${QT_LIBRARIES})
+INSTALL(TARGETS i-score DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT i-score)
