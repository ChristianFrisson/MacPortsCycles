--- /dev/null	2015-10-05 01:53:43.000000000 +0200
+++ Makefile	2015-10-05 01:50:44.000000000 +0200
@@ -0,0 +1,134 @@
+#===========================================================================
+# This Makefile uses quite heavily GNU Make extensions, so it's probably
+# hopeless to try to use it with other Make programs which do not have the
+# same extensions.
+#
+# Also requires: rm, grep, sed and g++ (regardless of what CXX and LD are).
+# The optimizer code generator requires bison.
+#===========================================================================
+
+RELEASE_VERSION=4.5.2
+
+# The FP_FEATURE_FLAGS is set by run_full_release_testing.sh, but can be
+# used otherwise as well.
+ifeq ($(FP_FEATURE_FLAGS),)
+FEATURE_FLAGS =
+FEATURE_FLAGS += -DFP_ENABLE_EVAL
+#FEATURE_FLAGS += -DFP_NO_SUPPORT_OPTIMIZER
+#FEATURE_FLAGS += -DFP_USE_THREAD_SAFE_EVAL
+#FEATURE_FLAGS += -DFP_USE_THREAD_SAFE_EVAL_WITH_ALLOCA
+#FEATURE_FLAGS += -D_GLIBCXX_DEBUG
+#FEATURE_FLAGS += -DFP_DISABLE_SHORTCUT_LOGICAL_EVALUATION
+FEATURE_FLAGS += -DFP_SUPPORT_FLOAT_TYPE
+FEATURE_FLAGS += -DFP_SUPPORT_LONG_DOUBLE_TYPE
+FEATURE_FLAGS += -DFP_SUPPORT_LONG_INT_TYPE
+#FEATURE_FLAGS += -DFP_SUPPORT_MPFR_FLOAT_TYPE
+#FEATURE_FLAGS += -DFP_SUPPORT_GMP_INT_TYPE
+FEATURE_FLAGS += -DFP_SUPPORT_COMPLEX_DOUBLE_TYPE
+FEATURE_FLAGS += -DFP_SUPPORT_COMPLEX_FLOAT_TYPE
+FEATURE_FLAGS += -DFP_SUPPORT_COMPLEX_LONG_DOUBLE_TYPE
+FEATURE_FLAGS += -DFP_USE_STRTOLD
+#FEATURE_FLAGS += -DFP_SUPPORT_CPLUSPLUS11_MATH_FUNCS
+else
+FEATURE_FLAGS = $(FP_FEATURE_FLAGS)
+endif
+
+OPTIMIZATION=-O3 -ffast-math -march=native
+#       -ffunction-sections -fdata-sections
+
+# For GCC (not clang):
+#OPTIMIZATION += -fexpensive-optimizations -fvpt -fomit-frame-pointer -ffunction-cse
+
+#OPTIMIZATION+=-g
+#OPTIMIZATION=-g -O0 -fno-inline
+#OPTIMIZATION=-g -O0 -fno-inline -fno-inline-functions -fno-default-inline
+#OPTIMIZATION=-g -O2 -fno-inline -fno-inline-functions -fno-default-inline
+#OPTIMIZATION=-g -pg -fprofile -fprofile-values -fprofile-generate -ftest-coverage
+#OPTIMIZATION=-g -pg
+
+#CXX=g++
+CXX=clang++
+# -m32 -mfpmath=sse
+# -m32 -mfpmath=387
+
+#LD=g++
+LD=clang++
+#LD=g++ -g
+# -m32 -mfpmath=sse
+# -m32 -mfpmath=387
+
+#OPTIMIZATION += -finline -finline-functions -fdefault-inline
+#OPTIMIZATION += -finline-limit=300000
+#OPTIMIZATION += --param max-inline-insns-auto=300000
+#OPTIMIZATION += --param max-inline-recursive-depth-auto=30
+#OPTIMIZATION += --param max-inline-insns-single=300000
+#OPTIMIZATION += --param inline-unit-growth=9000
+#OPTIMIZATION += --param max-early-inliner-iterations=30
+#OPTIMIZATION += --param early-inlining-insns=90000
+#OPTIMIZATION += -fkeep-inline-functions
+#OPTIMIZATION += -fimplement-inlines
+
+FEATURE_FLAGS += -DFUNCTIONPARSER_SUPPORT_DEBUGGING
+
+#LD +=  -fprofile -fprofile-values -fprofile-generate -ftest-coverage 
+
+CPPFLAGS=$(FEATURE_FLAGS)
+CXXFLAGS=-Wall -W -Wno-long-long -pedantic -ansi $(OPTIMIZATION)
+#CXXFLAGS += -Wunreachable-code
+#CXXFLAGS += -std=c++0x
+
+#CXXFLAGS += -Weffc++
+
+ifneq (,$(findstring -DFP_SUPPORT_MPFR_FLOAT_TYPE,$(FEATURE_FLAGS)))
+LDFLAGS += -lgmp -lmpfr
+ADDITIONAL_MODULES = mpfr/MpfrFloat.o
+ifneq (,$(findstring -DFP_SUPPORT_GMP_INT_TYPE,$(FEATURE_FLAGS)))
+ADDITIONAL_MODULES += mpfr/GmpInt.o
+endif
+else
+ifneq (,$(findstring -DFP_SUPPORT_GMP_INT_TYPE,$(FEATURE_FLAGS)))
+LDFLAGS += -lgmp
+ADDITIONAL_MODULES = mpfr/GmpInt.o
+endif
+endif
+
+ifneq (,$(findstring -DFP_USE_THREAD_SAFE_EVAL,$(FEATURE_FLAGS)))
+BOOST_THREAD_LIB = -lboost_thread-mt -lboost_system
+else
+ifneq (,$(findstring -DFP_USE_THREAD_SAFE_EVAL_WITH_ALLOCA,$(FEATURE_FLAGS)))
+BOOST_THREAD_LIB = -lboost_thread-mt -lboost_system
+endif
+endif
+
+ifneq (,$(findstring -DFP_SUPPORT_CPLUSPLUS11_MATH_FUNCS,$(FEATURE_FLAGS)))
+CXXFLAGS += -std=c++0x
+endif
+
+#LD += -Xlinker --gc-sections
+#LD += -Xlinker --print-gc-sections
+# ^Use this option to list everything that GC removed.
+
+
+# For compilation with ICC:
+#OPTIMIZATION=-O3 -xT -inline-level=2 -w1 -openmp -mssse3
+#CXX=icc
+#LD=icc  -L/opt/intel/Compiler/11.1/059/bin/intel64/lib -lirc -lstdc++ -openmp -lguide -lpthread
+#CXXFLAGS=-Wall $(OPTIMIZATION) $(FEATURE_FLAGS)
+
+CPPFLAGS += -I"`pwd`"
+
+FPARSERLIB = ./libfparser.a
+
+all: $(FPARSERLIB)
+
+FP_MODULES = 	fparser.o \
+		$(ADDITIONAL_MODULES)
+
+$(FPARSERLIB): $(FP_MODULES)
+	ar rcs $(FPARSERLIB) $(FP_MODULES)
+
+examples/example: examples/example.o $(FP_MODULES)
+	$(LD) -o $@ $^ $(LDFLAGS)
+
+examples/example2: examples/example2.o $(FP_MODULES)
+	$(LD) -o $@ $^ $(LDFLAGS)
